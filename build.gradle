/*
 * This build file was generated by the Gradle 'init' task.
 *
 */

plugins {
  id "com.jfrog.bintray" version "1.8.4"
  id "org.sonarqube" version "2.6.1"
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = 1.7
targetCompatibility = 1.7

version = '0.15.0'
def libName = "preset-utils"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    jcenter()
}

ext {
    mainSource = file('src/main/java/')
    testSource = file('src/test/java/')
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    compile 'commons-cli:commons-cli:1.4'
    compile 'org.apache.commons:commons-text:1.4'
    compile 'org.jetbrains:annotations:15.0'
    compile "com.google.code.gson:gson:2.8.1"

    // Use JUnit test framework
    testCompile "junit:junit:4.12"
}

task getSynonyms(type: JavaExec) {
    main = "ch.poole.osm.presetutils.Synonyms"
    classpath = sourceSets.main.runtimeClasspath
    args('-u', 'https://raw.githubusercontent.com/openstreetmap/iD/release/dist/locales/',
         '-lang', 'de',
    	 '-x', 'military')
}

task convertIdPresets(type: JavaExec) {
    main = "ch.poole.osm.presetutils.ID2JOSM"
    classpath = sourceSets.main.runtimeClasspath
    // args('-o', 'build/tmp/id_preset.xml')
    args('-n', '-o', 'build/tmp/id_preset_notaginfo.xml')
}
convertIdPresets.group = 'preset stuff'
convertIdPresets.description = 'Generate a JOSM format preset from the iD presets'

task presetsStats(type: JavaExec) {
    main = "ch.poole.osm.presetutils.PresetStats"
    classpath = sourceSets.main.runtimeClasspath
    // args('-ti', 'build/tmp/test.xml');
    // args('-dti', 'build/tmp/id_preset.xml', '-o', 'build/tmp/id_tags.txt');
    // args('-dti', 'build/tmp/id_preset_notaginfo.xml', '-o', 'build/tmp/id_tags_notaginfo.txt');
    // args('-ti', 'build/tmp/defaultpresets.xml', '-o', 'build/tmp/josm_tags.txt')
    args('-dti', '/Users/simon/git/beautified-JOSM-preset/master_preset.xml', '-o', 'build/tmp/vespucci_tags.txt')
    // args('-ti', '/Users/simon/Documents/OSM/SOTM 2018/presets-josm-20071016-current-format.xml', '-o', 'build/tmp/josm_tags_2007.txt')
}
presetsStats.group = 'preset stuff'
presetsStats.description = 'Generate tag support stats for a preset'

task tagsFromTaginfo(type: JavaExec) {
    main = "ch.poole.osm.presetutils.TagsFromTaginfo"
    classpath = sourceSets.main.runtimeClasspath
    args('-n','-o','build/tmp/taginfo_tags_nosubtags.txt')
    // args('-o','build/tmp/taginfo_tags.txt')
}
tagsFromTaginfo.group = 'preset stuff'
tagsFromTaginfo.description = 'Generate list of object tags from taginfo'

task comparePresets(type: JavaExec) {
    main = "ch.poole.osm.presetutils.ComparePresets"
    classpath = sourceSets.main.runtimeClasspath
    // args('-r','/Users/simon/Documents/OSM/SOTM 2018/tags_reference.txt','-i','build/tmp/vespucci_tags.txt')
    // args('-r','build/tmp/josm_tags.txt','-i','build/tmp/vespucci_tags.txt')
    // args('-r','build/tmp/taginfo_tags_nosubtags.txt','-i','build/tmp/id_tags.txt')
    // args( '-r','build/tmp/id_tags_notaginfo.txt','-i','build/tmp/vespucci_tags.txt')
    args( '-r','build/tmp/id_tags.txt','-i','build/tmp/vespucci_tags.txt')
}
comparePresets.group = 'preset stuff'
comparePresets.description = 'Compare input tag list to reference'

task mergePresetsStats(type: JavaExec) {
    main = "ch.poole.osm.presetutils.MergePresetStats"
    classpath = sourceSets.main.runtimeClasspath
    // args('-i', 'build/tmp/id_tags.txt', 'build/tmp/id_tags_notaginfo.txt', 'build/tmp/josm_tags.txt', 'build/tmp/vespucci_tags.txt', '/Users/simon/Documents/OSM/SOTM 2018/tags_reference.txt')
    // args('-i', 'build/tmp/id_tags.txt', , 'build/tmp/id_tags_notaginfo.txt', 'build/tmp/vespucci_tags.txt', 'build/tmp/taginfo_tags.txt', '-o', 'build/tmp/merged_stats.txt')
    // args('-i', 'build/tmp/id_tags.txt', , 'build/tmp/id_tags_notaginfo.txt', 'build/tmp/vespucci_tags.txt', 'build/tmp/taginfo_tags_nosubtags.txt', '-o', 'build/tmp/merged_stats_nosubtags.txt')
    args('-i', 'build/tmp/taginfo_tags.txt', 'build/tmp/id_tags.txt', 'build/tmp/id_tags_notaginfo.txt', 'build/tmp/vespucci_tags.txt', 'build/tmp/josm_tags.txt', '-o', 'build/tmp/merged_stats.txt')
}
mergePresetsStats.group = 'preset stuff'
mergePresetsStats.description = 'Merge multiple preset tag stats files'

task sourcesJar(type: Jar) {
	from mainSource, testSource
	classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
//	options.encoding = 'UTF-8'
}

sonarqube {
    properties {
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/classes/main/"
        property "sonar.jacoco.reportPaths","build/jacoco/test.exec"
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'ch.poole'
            artifactId 'preset-utils'
			artifact sourcesJar
			artifact javadocJar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['MyPublication']
    pkg {
        repo = 'osm'
        name = 'preset-utils'
        licenses = ['BSD 3-Clause']
        vcsUrl = 'https://github.com/simonpoole/preset-utils.git'
        version {
        	name = "${project.version}"
			released  = new Date()
			gpg {
				sign = true //Determines whether to GPG sign the files. The default is false
				passphrase = System.getenv('BINTRAY_PASSPHRASE')
			}
        }
    }
}

