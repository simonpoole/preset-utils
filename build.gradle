/*
 * This build file was generated by the Gradle 'init' task.
 *
 */
//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.breadmoirai:github-release:2.2.11"
    }
}

plugins {
  id "org.sonarqube" version "2.6.1"
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "com.github.breadmoirai.github-release"

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '0.39.0'
def libName = "preset-utils"

repositories {
    mavenCentral()
}

ext {
    github_token = System.getenv('GITHUB_TOKEN')
    mainSource = file('src/main/java/')
    testSource = file('src/test/java/')
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'org.apache.commons:commons-text:1.4'
    implementation 'org.jetbrains:annotations:15.0'
    implementation "com.google.code.gson:gson:2.8.1"

    // Use JUnit test framework
    testImplementation "junit:junit:4.12"
}

task getSynonyms(type: JavaExec) {
    main = "ch.poole.osm.presetutils.Synonyms"
    classpath = sourceSets.main.runtimeClasspath
    args('-u', 'https://raw.githubusercontent.com/openstreetmap/id-tagging-schema/main/dist/translations/',
         '-lang', 'de',
    	 '-x', 'military',
    	 '-r')
}

task convertIdPresets(type: JavaExec) {
    main = "ch.poole.osm.presetutils.ID2JOSM"
    classpath = sourceSets.main.runtimeClasspath
    // args('-o', 'build/tmp/id_preset.xml')
    args('-n', '-o', 'build/tmp/id_preset_notaginfo.xml')
}
convertIdPresets.group = 'preset stuff'
convertIdPresets.description = 'Generate a JOSM format preset from the iD presets'

task presetsStats(type: JavaExec) {
    main = "ch.poole.osm.presetutils.PresetStats"
    classpath = sourceSets.main.runtimeClasspath
    // args('-ti', 'build/tmp/test.xml');
    // args('-ti', 'build/tmp/id_preset.xml', '-o', 'build/tmp/id_tags.txt');
    args('-i', 'build/tmp/id_preset_notaginfo.xml', '-o', 'build/tmp/id_tags_notaginfo.txt');
    // args('-ti', 'build/tmp/defaultpresets.xml', '-o', 'build/tmp/josm_tags.txt')
    // args('-i', '/Users/simon/git/beautified-JOSM-preset/build/gen/vespucci_preset.xml', '-o', 'build/tmp/vespucci_tags.txt')
    // args('-ti', '/Users/simon/Documents/OSM/SOTM 2018/presets-josm-20071016-current-format.xml', '-o', 'build/tmp/josm_tags_2007.txt')
}
presetsStats.group = 'preset stuff'
presetsStats.description = 'Generate tag support stats for a preset'

task tagsFromTaginfo(type: JavaExec) {
    main = "ch.poole.osm.presetutils.TagsFromTaginfo"
    classpath = sourceSets.main.runtimeClasspath
    // args('-n','-o','build/tmp/taginfo_tags_nosubtags.txt')
    args('-o','build/tmp/taginfo_tags.txt')
}
tagsFromTaginfo.group = 'preset stuff'
tagsFromTaginfo.description = 'Generate list of object tags from taginfo'

task comparePresets(type: JavaExec) {
    main = "ch.poole.osm.presetutils.ComparePresets"
    classpath = sourceSets.main.runtimeClasspath
    // args('-r','/Users/simon/Documents/OSM/SOTM 2018/tags_reference.txt','-i','build/tmp/vespucci_tags.txt')
    // args('-r','build/tmp/josm_tags.txt','-i','build/tmp/vespucci_tags.txt')
    // args('-r','build/tmp/taginfo_tags_nosubtags.txt','-i','build/tmp/id_tags.txt')
    args( '-r','build/tmp/id_tags_notaginfo.txt','-i','build/tmp/vespucci_tags.txt')
    // args( '-r','build/tmp/id_tags.txt','-i','build/tmp/vespucci_tags.txt')
}
comparePresets.group = 'preset stuff'
comparePresets.description = 'Compare input tag list to reference'

task mergePresetsStats(type: JavaExec) {
    main = "ch.poole.osm.presetutils.MergePresetStats"
    classpath = sourceSets.main.runtimeClasspath
    // args('-i', 'build/tmp/id_tags.txt', 'build/tmp/id_tags_notaginfo.txt', 'build/tmp/josm_tags.txt', 'build/tmp/vespucci_tags.txt', '/Users/simon/Documents/OSM/SOTM 2018/tags_reference.txt')
    args('-i' , 'build/tmp/id_tags_notaginfo.txt', 'build/tmp/vespucci_tags.txt', 'build/tmp/taginfo_tags.txt', '-o', 'build/tmp/merged_stats.txt')
    // args('-i',  'build/tmp/id_tags_notaginfo.txt', 'build/tmp/vespucci_tags.txt', 'build/tmp/taginfo_tags_nosubtags.txt', '-o', 'build/tmp/merged_stats_nosubtags.txt')
    // args('-i', 'build/tmp/taginfo_tags.txt', 'build/tmp/id_tags.txt', 'build/tmp/id_tags_notaginfo.txt', 'build/tmp/vespucci_tags.txt', 'build/tmp/josm_tags.txt', '-o', 'build/tmp/merged_stats.txt')
}
mergePresetsStats.group = 'preset stuff'
mergePresetsStats.description = 'Merge multiple preset tag stats files'

task nsiStats(type: JavaExec) {
    main = "ch.poole.osm.presetutils.NsiStats"
    classpath = sourceSets.main.runtimeClasspath
    args('-i', 'build/tmp/name-suggestions.min.json', '-o', 'build/tmp/nsi_stats.txt')
}
nsiStats.group = 'NSI stuff'
nsiStats.description = 'NSI stats files'

task copyCss(type: Copy) {
    from new File("src/main/resources/")
    include 'preset.css'
    into 'build/tmp/website'
}

task createWebsite(type: JavaExec, dependsOn: copyCss) {
    main = "ch.poole.osm.presetutils.Preset2Html"
    classpath = sourceSets.main.runtimeClasspath
    args('-i', '/Users/simon/git/beautified-JOSM-preset/build/gen/vespucci_preset.xml', '-o', 'build/tmp/website.html')
}
createWebsite.group = 'preset stuff'
createWebsite.description = 'Generate a web page from preset'

task generateIconList(type: JavaExec) {
    main = "ch.poole.osm.presetutils.ListIcons"
    classpath = sourceSets.main.runtimeClasspath
    args('-i', 'build/tmp/defaultpresets.xml', '-o', 'build/tmp/icon_list_josm.txt', '-m', 'build/tmp/josm_icons.txt')
    // args('-i', '/Users/simon/git/beautified-JOSM-preset/master_preset.xml', '-o', 'build/tmp/icon_list_vespucci.txt', '-m', 'build/tmp/vespucci_icons.txt')
}
generateIconList.group = 'preset stuff'
generateIconList.description = 'Generate a list of icons used in the preset'

task generateJosmIconMapping(type: JavaExec) {
    main = "ch.poole.osm.presetutils.CreateJosmPresetIconMap"
    classpath = sourceSets.main.runtimeClasspath
    args('-i', 'build/tmp/icon_list_tags.txt', '-j', 'build/tmp/icon_list_josm.txt', '-o', "build/tmp/josm_icon_map.txt")
}
generateJosmIconMapping.group = 'preset stuff'
generateJosmIconMapping.description = 'Generate a tag to icons mapping for JOSM'

task checkPreset(type: JavaExec) {
    main = "ch.poole.osm.presetutils.CheckPreset"
    classpath = sourceSets.main.runtimeClasspath
    // args('-i', 'build/tmp/master_preset.xml')
    args('-i', '/Users/simon/git/beautified-JOSM-preset/master_preset.xml')
}
checkPreset.group = 'preset stuff'
checkPreset.description = 'Do some additional checks on a preset'

def loadProperties = { filename -> 
    def properties = new Properties()
    file(filename).withInputStream {
        properties.load(it)
    }
    return properties
}

//task convertToMappedIcons(type: Copy) {
//    from projectDir
//    include 'build/tmp/master_preset.xml'
//    into 'build/gen/'
//    filteringCharset = 'UTF-8'
//    rename ('master_preset.xml', 'mapped_master_preset.xml')
//    def map = loadProperties('build/tmp/reverse_vespucci_icons.csv')
//    filter(ReplaceTokens, beginToken : 'icon="', endToken : '"', tokens: map)
//}

task sourcesJar(type: Jar) {
	from mainSource, testSource
	archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
//	options.encoding = 'UTF-8'
}

task replaceVersion {
    inputs.file('build.gradle')
    ant.replaceregexp(match:'([0-9]+\\.[0-9]+\\.[0-9]+)', replace:"${version}", flags:'g', byline:true) {
        fileset(dir: '.', includes: 'README.md')
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar, dependsOn: build) {
    manifest {
        attributes 'Implementation-Title': 'preset utils fat jar',
        'Implementation-Version': "${project.version}"
    }
    archiveBaseName = project.name + '-all'
    duplicatesStrategy= "exclude"
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
fatJar.group = 'build'

sonarqube {
    properties {
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/classes/main/"
        property "sonar.jacoco.reportPaths","build/jacoco/test.exec"
    }
}

ext {
    repoUrl = 'https://github.com/simonpoole/preset-utils.git'
    spdxId = 'Apache-2.0'
}

publishing {
    publications {
        Release(MavenPublication) {
            from components.java
            groupId 'ch.poole'
            artifactId 'preset-utils'
			artifact sourcesJar
			artifact javadocJar
			
			pom {
                name = artifactId
                description = 'Assorted utils for JOSM style presets'    
                url = 'https://github.com/simonpoole/preset-utils'
                scm {
                    url = repoUrl
                }
                licenses {
                    license {
                        name = spdxId
                        url = 'https://raw.githubusercontent.com/simonpoole/preset-utils/master/LICENCE'
                    }
                }
                developers {
                    developer {
                        name = 'Simon Poole'
                    }
                }
                repositories {
                    maven {
                        name = 'sonatype'
                        credentials {
                            username System.getenv('SONATYPE_USER')
                            password System.getenv('SONATYPE_PASSWORD')
                        }
                        def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                        def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.Release
}

githubRelease {
    token "${github_token}"
    owner "simonpoole"
    tagName project.version
    releaseName project.version
    body ""
    FilenameFilter filter = { dir, filename -> filename.contains(version) }
    releaseAssets = new File(buildDir, 'libs').listFiles(filter)
    overwrite true
}

build {
    dependsOn "replaceVersion"
}
